name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Определяем платформы для выполнения
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      # Установка зависимостей для Linux и macOS
      - name: Install Dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install libboost-test-dev -y
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install boost  # Убедитесь, что Homebrew установлен на macOS
          fi

      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb  # Убедитесь, что у вас есть соответствующий файл для macOS
          asset_name: helloworld-0.0.${{ github.run_number }}-macOS.deb  # Измените имя файла для macOS при необходимости
          asset_content_type: application/vnd.debian.binary-package  # Убедитесь, что это правильный тип контента для вашего пакета на macOS