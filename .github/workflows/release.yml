name: CI/CD

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:

  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - run: |
          sudo apt-get update && sudo apt-get install -y libboost-test-dev libglfw3-dev libglm-dev || { echo 'Failed to install dependencies'; exit 1; }
      
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DGITHUB_RUN_NUMBER=${{ github.run_number }} -DGITHUB_SHA=${{ github.sha }}
      
      - run: cmake --build .
      
      - run: cmake --build . --target test
      
      - run: cmake --build . --target package
      
      - name: Create Release for Linux
        id: create_release_linux
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}-${{ github.sha }}"
          release_name: Release ${{ github.run_number }} for Linux
          draft: false
          prerelease: false
      
      - name: Upload Release Asset for Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-${{ github.sha }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-${{ github.sha }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

  build-macos:
    runs-on: macos-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - run: |
          brew update && brew install boost glfw glm || { echo 'Failed to install dependencies'; exit 1; }
      
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DGITHUB_RUN_NUMBER=${{ github.run_number }} -DGITHUB_SHA=${{ github.sha }}
      
      - run: cmake --build .
      
      - run: cmake --build . --target test
      
      - run: cmake --build . --target package
      
      - name: Create Release for macOS
        id: create_release_macos
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}-${{ github.sha }}"
          release_name: Release ${{ github.run_number }} for macOS
          draft: false
          prerelease: false
      
      - name: Upload Release Asset for macOS
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_macos.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-${{ github.sha }}-Darwin.dmg
          asset_name: helloworld-0.0.${{ github.run_number }}-${{ github.sha }}-Darwin.dmg
          asset_content_type: application/x-apple-diskimage